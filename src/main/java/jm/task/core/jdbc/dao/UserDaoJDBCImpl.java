package jm.task.core.jdbc.dao;

import jm.task.core.jdbc.model.User;
import jm.task.core.jdbc.util.Util;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import static jm.task.core.jdbc.util.Util.*;

public class UserDaoJDBCImpl implements UserDao {
    static Logger logger = Logger.getLogger(UserDaoJDBCImpl.class.getName());
    private static final String DROP_TABLE_QUERY = "DROP TABLE IF EXISTS userTable";
    private static final String INSERT_QUERY = "INSERT INTO userTable(name, lastname, age) VALUES (?, ?, ?)";
    private static final String SELECT_QUERY = "SELECT * FROM userTable";
    private static final String DELETE_QUERY = "DELETE FROM userTable WHERE id = ?";
    private static final String TRUNCATE_QUERY = "TRUNCATE TABLE userTable";
    private final Connection connection;

    private final String CR_TAB_QUERY =
            "CREATE TABLE IF NOT EXISTS userTable" +
                    """
                    (id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                     name VARCHAR(255),
                     lastname VARCHAR(255),
                     age SMALLINT)""";


    public UserDaoJDBCImpl(Util util) {
        this.connection = connOpen();
    }
    @Override
    public void createUsersTable() {
        try (Statement statement = connOpen().createStatement()) {

            statement.executeUpdate(CR_TAB_QUERY);
            logger.log(Level.INFO,"Table has created!");

        } catch (SQLException e) {
            logger.log(Level.INFO,"Table already exists");
        }
    }
    @Override
    public void dropUsersTable() {
        try (Statement statement = connOpen().createStatement()) {

            statement.executeUpdate(DROP_TABLE_QUERY);
            logger.log(Level.INFO,"Table has deleted!");

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
    @Override
    public void saveUser(String name, String lastName, byte age) {
        try (PreparedStatement preparedStatement = connOpen().prepareStatement(INSERT_QUERY)) {

            preparedStatement.setString(1, name);
            preparedStatement.setString(2, lastName);
            preparedStatement.setByte(3, age);
            preparedStatement.executeUpdate();
            System.out.printf("User с именем %s добавлен в таблицу\n", name);

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

    }
    @Override
    public void removeUserById(long id) {
        try (PreparedStatement preparedStatement = connOpen().prepareStatement(DELETE_QUERY)) {

            preparedStatement.setLong(1, id);
            preparedStatement.executeUpdate();
            logger.log(Level.INFO,"Removing user with ID: " + id);

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

    }
    @Override
    public List<User> getAllUsers() {
        List<User> list = new ArrayList<>();
        try (Statement statement = connOpen().createStatement()) {

            ResultSet resultSet = statement.executeQuery(SELECT_QUERY);
            while (resultSet.next()) {
                User user = new User();
                user.setId(resultSet.getLong("id"));
                user.setName(resultSet.getString("name"));
                user.setLastName(resultSet.getString("lastname"));
                user.setAge(resultSet.getByte("age"));
                list.add(user);

            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        return list;

    }
    @Override
    public void cleanUsersTable() {
        try (PreparedStatement statement = connOpen().prepareStatement(TRUNCATE_QUERY)) {

            statement.executeUpdate();
            logger.log(Level.INFO,"Table has cleaned!");

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

    }
}
